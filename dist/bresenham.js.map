{"version":3,"file":"bresenham.js.map","sources":["../index.js"],"sourcesContent":["const {\n  abs,\n  min,\n  max,\n  pow,\n  floor,\n  sqrt,\n  cos,\n  sin\n} = Math;\n\n/**\n * @typedef {function} setPixel\n * @param {number} x\n * @param {number} y\n */\n\n/**\n * @typedef {function} setPixelAlpha\n * @param {number} x\n * @param {number} y\n * @param {number} alpha\n */\n\n/**\n * Line segment rasterisation\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {setPixel} setPixel\n */\nexport function line(x0, y0, x1, y1, setPixel) {\n  var dx = abs(x1 - x0),\n      sx = x0 < x1 ? 1 : -1;\n  var dy = -abs(y1 - y0),\n      sy = y0 < y1 ? 1 : -1;\n  var err = dx + dy, e2; /* error value e_xy */\n\n  for (;;) { /* loop */\n    setPixel(x0, y0);\n    e2 = 2 * err;\n    if (e2 >= dy) { /* e_xy+e_x > 0 */\n      if (x0 === x1) break;\n      err += dy;\n      x0 += sx;\n    }\n    if (e2 <= dx) { /* e_xy+e_y < 0 */\n      if (y0 === y1) break;\n      err += dx;\n      y0 += sy;\n    }\n  }\n}\n\n/**\n * Draws ellipse\n * @param  {number} xm\n * @param  {number} ym\n * @param  {number} a\n * @param  {number} b\n * @param  {setPixel} setPixel\n */\nexport function ellipse(xm, ym, a, b, setPixel) {\n  var x = -a, y = 0; /* II. quadrant from bottom left to top right */\n  var e2 = b * b, err = x * (2 * e2 + x) + e2; /* error of 1.step */\n\n  do {\n    setPixel(xm - x, ym + y); /*   I. Quadrant */\n    setPixel(xm + x, ym + y); /*  II. Quadrant */\n    setPixel(xm + x, ym - y); /* III. Quadrant */\n    setPixel(xm - x, ym - y); /*  IV. Quadrant */\n    e2 = 2 * err;\n    if (e2 >= (x * 2 + 1) * b * b) /* e_xy+e_x > 0 */\n      err += (++x * 2 + 1) * b * b;\n    if (e2 <= (y * 2 + 1) * a * a) /* e_xy+e_y < 0 */\n      err += (++y * 2 + 1) * a * a;\n  } while (x <= 0);\n\n  while (y++ < b) { /* too early stop of flat ellipses a=1, */\n    setPixel(xm, ym + y); /* -> finish tip of ellipse */\n    setPixel(xm, ym - y);\n  }\n}\n\n\n/**\n * Circel rasterisation\n * @param  {number} xm\n * @param  {number} ym\n * @param  {number} r\n * @param  {setPixel} setPixel\n */\nexport function circle(xm, ym, r, setPixel) {\n  let x = -r, y = 0, err = 2 - 2 * r; /* bottom left to top right */\n  do {\n    setPixel(xm - x, ym + y); /*   I. Quadrant +x +y */\n    setPixel(xm - y, ym - x); /*  II. Quadrant -x +y */\n    setPixel(xm + x, ym - y); /* III. Quadrant -x -y */\n    setPixel(xm + y, ym + x); /*  IV. Quadrant +x -y */\n    r = err;\n    if (r <= y) err += ++y * 2 + 1; /* e_xy+e_y < 0 */\n    if (r > x || err > y) /* e_xy+e_x > 0 or no 2nd y-step */\n      err += ++x * 2 + 1; /* -> x-step now */\n  } while (x < 0);\n}\n\n\nfunction assert(d, m = 'assert error') {\n  if (!d) throw new Error(m);\n}\n\n\n/**\n * plot a limited quadratic Bezier segment\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {setPixel} setPixel\n */\nexport function quadBezierSegment(x0, y0, x1, y1, x2, y2, setPixel) {\n  var sx = x2 - x1,\n      sy = y2 - y1;\n  var xx = x0 - x1,\n      yy = y0 - y1,\n      xy; /* relative values for checks */\n  var dx, dy, err, cur = xx * sy - yy * sx; /* curvature */\n\n  assert(xx * sx <= 0 && yy * sy <= 0, 'sign of gradient must not change');\n\n  if (sx * sx + sy * sy > xx * xx + yy * yy) { /* begin with longer part */\n    x2 = x0;\n    x0 = sx + x1;\n    y2 = y0;\n    y0 = sy + y1;\n    cur = -cur; /* swap P0 P2 */\n  }\n  if (cur != 0) { /* no straight line */\n    xx += sx;\n    xx *= sx = x0 < x2 ? 1 : -1; /* x step direction */\n    yy += sy;\n    yy *= sy = y0 < y2 ? 1 : -1; /* y step direction */\n    xy = 2 * xx * yy;\n    xx *= xx;\n    yy *= yy; /* differences 2nd degree */\n    if (cur * sx * sy < 0) { /* negated curvature? */\n      xx = -xx;\n      yy = -yy;\n      xy = -xy;\n      cur = -cur;\n    }\n    dx = 4.0 * sy * cur * (x1 - x0) + xx - xy; /* differences 1st degree */\n    dy = 4.0 * sx * cur * (y0 - y1) + yy - xy;\n    xx += xx;\n    yy += yy;\n    err = dx + dy + xy; /* error 1st step */\n    do {\n      setPixel(x0, y0); /* plot curve */\n      if (x0 == x2 && y0 == y2) return; /* last pixel -> curve finished */\n      y1 = 2 * err < dx; /* save value for test of y step */\n      if (2 * err > dy) {\n        x0 += sx;\n        dx -= xy;\n        err += dy += yy;\n      } /* x step */\n      if (y1) {\n        y0 += sy;\n        dy -= xy;\n        err += dx += xx;\n      } /* y step */\n    } while (dy < 0 && dx > 0); /* gradient negates -> algorithm fails */\n  }\n  line(x0, y0, x2, y2, setPixel); /* plot remaining part to end */\n}\n\n/**\n * Plot any quadratic Bezier curve with anti-alias\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {setPixelAlpha} setPixelAA\n */\nexport function quadBezierAA(x0, y0, x1, y1, x2, y2, setPixelAA) {\n  var x = x0 - x1,\n      y = y0 - y1;\n  var t = x0 - 2 * x1 + x2, r;\n\n  if (x * (x2 - x1) > 0) { /* horizontal cut at P4? */\n    if (y * (y2 - y1) > 0) /* vertical cut at P6 too? */\n      if (abs((y0 - 2 * y1 + y2) / t * x) > abs(y)) { /* which first? */\n        x0 = x2;\n        x2 = x + x1;\n        y0 = y2;\n        y2 = y + y1; /* swap points */\n      } /* now horizontal cut at P4 comes first */\n    t = (x0 - x1) / t;\n    r = (1 - t) * ((1 - t) * y0 + 2.0 * t * y1) + t * t * y2; /* By(t=P4) */\n    t = (x0 * x2 - x1 * x1) * t / (x0 - x1); /* gradient dP4/dx=0 */\n    x = floor(t + 0.5);\n    y = floor(r + 0.5);\n    r = (y1 - y0) * (t - x0) / (x1 - x0) + y0; /* intersect P3 | P0 P1 */\n    quadBezierSegmentAA(x0, y0, x, floor(r + 0.5), x, y, setPixelAA);\n    r = (y1 - y2) * (t - x2) / (x1 - x2) + y2; /* intersect P4 | P1 P2 */\n    x0 = x1 = x;\n    y0 = y;\n    y1 = floor(r + 0.5); /* P0 = P4, P1 = P8 */\n  }\n  if ((y0 - y1) * (y2 - y1) > 0) { /* vertical cut at P6? */\n    t = y0 - 2 * y1 + y2;\n    t = (y0 - y1) / t;\n    r = (1 - t) * ((1 - t) * x0 + 2.0 * t * x1) + t * t * x2; /* Bx(t=P6) */\n    t = (y0 * y2 - y1 * y1) * t / (y0 - y1); /* gradient dP6/dy=0 */\n    x = floor(r + 0.5);\n    y = floor(t + 0.5);\n    r = (x1 - x0) * (t - y0) / (y1 - y0) + x0; /* intersect P6 | P0 P1 */\n    quadBezierSegmentAA(x0, y0, floor(r + 0.5), y, x, y, setPixelAA);\n    r = (x1 - x2) * (t - y2) / (y1 - y2) + x2; /* intersect P7 | P1 P2 */\n    x0 = x;\n    x1 = floor(r + 0.5);\n    y0 = y1 = y; /* P0 = P6, P1 = P7 */\n  }\n  quadBezierSegmentAA(x0, y0, x1, y1, x2, y2, setPixelAA); /* remaining part */\n}\n\n/**\n * Plot any quadratic Bezier curve\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {setPixel} setPixel\n */\nexport function quadBezier(x0, y0, x1, y1, x2, y2, setPixel) {\n  var x = x0 - x1,\n      y = y0 - y1;\n  var t = x0 - 2 * x1 + x2, r;\n\n  if (x * (x2 - x1) > 0) { /* horizontal cut at P4? */\n    if (y * (y2 - y1) > 0) /* vertical cut at P6 too? */\n      if (abs((y0 - 2 * y1 + y2) / t * x) > abs(y)) { /* which first? */\n        x0 = x2;\n        x2 = x + x1;\n        y0 = y2;\n        y2 = y + y1; /* swap points */\n      } /* now horizontal cut at P4 comes first */\n    t = (x0 - x1) / t;\n    r = (1 - t) * ((1 - t) * y0 + 2.0 * t * y1) + t * t * y2; /* By(t=P4) */\n    t = (x0 * x2 - x1 * x1) * t / (x0 - x1); /* gradient dP4/dx=0 */\n    x = floor(t + 0.5);\n    y = floor(r + 0.5);\n    r = (y1 - y0) * (t - x0) / (x1 - x0) + y0; /* intersect P3 | P0 P1 */\n    quadBezierSegment(x0, y0, x, floor(r + 0.5), x, y, setPixel);\n    r = (y1 - y2) * (t - x2) / (x1 - x2) + y2; /* intersect P4 | P1 P2 */\n    x0 = x1 = x;\n    y0 = y;\n    y1 = floor(r + 0.5); /* P0 = P4, P1 = P8 */\n  }\n  if ((y0 - y1) * (y2 - y1) > 0) { /* vertical cut at P6? */\n    t = y0 - 2 * y1 + y2;\n    t = (y0 - y1) / t;\n    r = (1 - t) * ((1 - t) * x0 + 2.0 * t * x1) + t * t * x2; /* Bx(t=P6) */\n    t = (y0 * y2 - y1 * y1) * t / (y0 - y1); /* gradient dP6/dy=0 */\n    x = floor(r + 0.5);\n    y = floor(t + 0.5);\n    r = (x1 - x0) * (t - y0) / (y1 - y0) + x0; /* intersect P6 | P0 P1 */\n    quadBezierSegment(x0, y0, floor(r + 0.5), y, x, y, setPixel);\n    r = (x1 - x2) * (t - y2) / (y1 - y2) + x2; /* intersect P7 | P1 P2 */\n    x0 = x;\n    x1 = floor(r + 0.5);\n    y0 = y1 = y; /* P0 = P6, P1 = P7 */\n  }\n  quadBezierSegment(x0, y0, x1, y1, x2, y2, setPixel); /* remaining part */\n}\n\n/**\n * plot a limited rational Bezier segment, squared weight\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {number} w\n * @param  {setPixel} setPixel\n */\nfunction quadRationalBezierSegment(x0, y0, x1, y1, x2, y2, w, setPixel) {\n  var sx = x2 - x1,\n      sy = y2 - y1; /* relative values for checks */\n  var dx = x0 - x2,\n      dy = y0 - y2,\n      xx = x0 - x1,\n      yy = y0 - y1;\n  var xy = xx * sy + yy * sx,\n      cur = xx * sy - yy * sx,\n      err; /* curvature */\n\n  assert(xx * sx <= 0.0 && yy * sy <= 0.0, 'sign of gradient must not change');\n\n  if (cur != 0.0 && w > 0.0) { /* no straight line */\n    if (sx * sx + sy * sy > xx * xx + yy * yy) { /* begin with longer part */\n      x2 = x0;\n      x0 -= dx;\n      y2 = y0;\n      y0 -= dy;\n      cur = -cur; /* swap P0 P2 */\n    }\n    xx = 2.0 * (4.0 * w * sx * xx + dx * dx); /* differences 2nd degree */\n    yy = 2.0 * (4.0 * w * sy * yy + dy * dy);\n    sx = x0 < x2 ? 1 : -1; /* x step direction */\n    sy = y0 < y2 ? 1 : -1; /* y step direction */\n    xy = -2.0 * sx * sy * (2.0 * w * xy + dx * dy);\n\n    if (cur * sx * sy < 0.0) { /* negated curvature? */\n      xx = -xx;\n      yy = -yy;\n      xy = -xy;\n      cur = -cur;\n    }\n    dx = 4.0 * w * (x1 - x0) * sy * cur + xx / 2.0 + xy; /* differences 1st degree */\n    dy = 4.0 * w * (y0 - y1) * sx * cur + yy / 2.0 + xy;\n\n    if (w < 0.5 && (dy > xy || dx < xy)) { /* flat ellipse, algorithm fails */\n      cur = (w + 1.0) / 2.0;\n      w = sqrt(w);\n      xy = 1.0 / (w + 1.0);\n      sx = floor((x0 + 2.0 * w * x1 + x2) * xy / 2.0 + 0.5); /* subdivide curve in half */\n      sy = floor((y0 + 2.0 * w * y1 + y2) * xy / 2.0 + 0.5);\n      dx = floor((w * x1 + x0) * xy + 0.5);\n      dy = floor((y1 * w + y0) * xy + 0.5, setPixel);\n      quadRationalBezierSegment(x0, y0, dx, dy, sx, sy, cur); /* plot separately */\n      dx = floor((w * x1 + x2) * xy + 0.5);\n      dy = floor((y1 * w + y2) * xy + 0.5, setPixel);\n      quadRationalBezierSegment(sx, sy, dx, dy, x2, y2, cur, setPixel);\n      return;\n    }\n    err = dx + dy - xy; /* error 1.step */\n    do {\n      setPixel(x0, y0); /* plot curve */\n      if (x0 == x2 && y0 == y2) return; /* last pixel -> curve finished */\n      x1 = 2 * err > dy;\n      y1 = 2 * (err + yy) < -dy; /* save value for test of x step */\n      if (2 * err < dx || y1) {\n        y0 += sy;\n        dy += xy;\n        err += dx += xx;\n      } /* y step */\n      if (2 * err > dx || x1) {\n        x0 += sx;\n        dx += xy;\n        err += dy += yy;\n      } /* x step */\n    } while (dy <= xy && dx >= xy); /* gradient negates -> algorithm fails */\n  }\n  line(x0, y0, x2, y2, setPixel); /* plot remaining needle to end */\n}\n\n/**\n * plot any quadratic rational Bezier curve\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {number} w\n * @param  {setPixel} setPixel\n */\nexport function quadRationalBezier(x0, y0, x1, y1, x2, y2, w, setPixel) {\n  var x = x0 - 2 * x1 + x2,\n      y = y0 - 2 * y1 + y2;\n  var xx = x0 - x1,\n      yy = y0 - y1,\n      ww, t, q;\n\n  assert(w >= 0.0, 'width is negative');\n\n  if (xx * (x2 - x1) > 0) { /* horizontal cut at P4? */\n    if (yy * (y2 - y1) > 0) /* vertical cut at P6 too? */\n      if (abs(xx * y) > abs(yy * x)) { /* which first? */\n        x0 = x2;\n        x2 = xx + x1;\n        y0 = y2;\n        y2 = yy + y1; /* swap points */\n      } /* now horizontal cut at P4 comes first */\n    if (x0 == x2 || w == 1.0) t = (x0 - x1) / x;\n    else { /* non-rational or rational case */\n      q = sqrt(4.0 * w * w * (x0 - x1) * (x2 - x1) + (x2 - x0) * (x2 - x0));\n      if (x1 < x0) q = -q;\n      t = (2.0 * w * (x0 - x1) - x0 + x2 + q) / (2.0 * (1.0 - w) * (x2 - x0)); /* t at P4 */\n    }\n    q = 1.0 / (2.0 * t * (1.0 - t) * (w - 1.0) + 1.0); /* sub-divide at t */\n    xx = (t * t * (x0 - 2.0 * w * x1 + x2) + 2.0 * t * (w * x1 - x0) + x0) * q; /* = P4 */\n    yy = (t * t * (y0 - 2.0 * w * y1 + y2) + 2.0 * t * (w * y1 - y0) + y0) * q;\n    ww = t * (w - 1.0) + 1.0;\n    ww *= ww * q; /* squared weight P3 */\n    w = ((1.0 - t) * (w - 1.0) + 1.0) * sqrt(q); /* weight P8 */\n    x = floor(xx + 0.5);\n    y = floor(yy + 0.5); /* P4 */\n    yy = (xx - x0) * (y1 - y0) / (x1 - x0) + y0; /* intersect P3 | P0 P1 */\n    quadRationalBezierSegment(x0, y0, x, floor(yy + 0.5), x, y, ww, setPixel);\n    yy = (xx - x2) * (y1 - y2) / (x1 - x2) + y2; /* intersect P4 | P1 P2 */\n    y1 = floor(yy + 0.5);\n    x0 = x1 = x;\n    y0 = y; /* P0 = P4, P1 = P8 */\n  }\n  if ((y0 - y1) * (y2 - y1) > 0) { /* vertical cut at P6? */\n    if (y0 == y2 || w == 1.0) t = (y0 - y1) / (y0 - 2.0 * y1 + y2);\n    else { /* non-rational or rational case */\n      q = sqrt(4.0 * w * w * (y0 - y1) * (y2 - y1) + (y2 - y0) * (y2 - y0));\n      if (y1 < y0) q = -q;\n      t = (2.0 * w * (y0 - y1) - y0 + y2 + q) / (2.0 * (1.0 - w) * (y2 - y0)); /* t at P6 */\n    }\n    q = 1.0 / (2.0 * t * (1.0 - t) * (w - 1.0) + 1.0); /* sub-divide at t */\n    xx = (t * t * (x0 - 2.0 * w * x1 + x2) + 2.0 * t * (w * x1 - x0) + x0) * q; /* = P6 */\n    yy = (t * t * (y0 - 2.0 * w * y1 + y2) + 2.0 * t * (w * y1 - y0) + y0) * q;\n    ww = t * (w - 1.0) + 1.0;\n    ww *= ww * q; /* squared weight P5 */\n    w = ((1.0 - t) * (w - 1.0) + 1.0) * sqrt(q); /* weight P7 */\n    x = floor(xx + 0.5);\n    y = floor(yy + 0.5); /* P6 */\n    xx = (x1 - x0) * (yy - y0) / (y1 - y0) + x0; /* intersect P6 | P0 P1 */\n    quadRationalBezierSegment(x0, y0, floor(xx + 0.5), y, x, y, ww, setPixel);\n    xx = (x1 - x2) * (yy - y2) / (y1 - y2) + x2; /* intersect P7 | P1 P2 */\n    x1 = floor(xx + 0.5);\n    x0 = x;\n    y0 = y1 = y; /* P0 = P6, P1 = P7 */\n  }\n  quadRationalBezierSegment(x0, y0, x1, y1, x2, y2, w * w, setPixel); /* remaining */\n}\n\n/**\n * Plot ellipse rotated by angle (radian)\n * @param  {number} x\n * @param  {number} y\n * @param  {number} a\n * @param  {number} b\n * @param  {number} angle\n * @param  {setPixel} setPixel\n */\nexport function rotatedEllipse(x, y, a, b, angle, setPixel) {\n  var xd = a * a,\n      yd = b * b;\n  var s = sin(angle),\n      zd = (xd - yd) * s; /* ellipse rotation */\n  xd = sqrt(xd - zd * s), yd = sqrt(yd + zd * s); /* surrounding rectangle */\n  a = xd + 0.5;\n  b = yd + 0.5;\n  zd = zd * a * b / (xd * yd); /* scale to integer */\n  rotatedEllipseRect(x - a, y - b, x + a, y + b, (4 * zd * cos(angle)), setPixel);\n}\n\n/**\n * Plot limited cubic Bezier segment\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {number} x3\n * @param  {number} y3\n * @param  {setPixel} setPixel\n */\nexport function cubicBezierSeg(x0, y0, x1, y1, x2, y2, x3, y3, setPixel) {\n  var f, fx, fy, leg = 1;\n  var sx = x0 < x3 ? 1 : -1,\n      sy = y0 < y3 ? 1 : -1; /* step direction */\n  var xc = -abs(x0 + x1 - x2 - x3),\n      xa = xc - 4 * sx * (x1 - x2),\n      xb = sx * (x0 - x1 - x2 + x3);\n  var yc = -abs(y0 + y1 - y2 - y3),\n      ya = yc - 4 * sy * (y1 - y2),\n      yb = sy * (y0 - y1 - y2 + y3);\n  var ab, ac, bc, cb, xx, xy, yy, dx, dy, ex, pxy, EP = 0.01;\n  /* check for curve restrains */\n  /* slope P0-P1 == P2-P3    and  (P0-P3 == P1-P2      or   no slope change) */\n  assert((x1 - x0) * (x2 - x3) < EP && ((x3 - x0) * (x1 - x2) < EP || xb * xb <\n    xa * xc + EP), 'slope change');\n  assert((y1 - y0) * (y2 - y3) < EP && ((y3 - y0) * (y1 - y2) < EP || yb * yb <\n    ya * yc + EP), 'slope change');\n\n  if (xa == 0 && ya == 0) { /* quadratic Bezier */\n    sx = floor((3 * x1 - x0 + 1) / 2);\n    sy = floor((3 * y1 - y0 + 1) / 2); /* new midpoint */\n    return quadBezierSegment(x0, y0, sx, sy, x3, y3, setPixel);\n  }\n  x1 = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0) + 1; /* line lengths */\n  x2 = (x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3) + 1;\n  do { /* loop over both ends */\n    ab = xa * yb - xb * ya;\n    ac = xa * yc - xc * ya;\n    bc = xb * yc - xc * yb;\n    ex = ab * (ab + ac - 3 * bc) + ac * ac; /* P0 part of self-intersection loop? */\n    f = ex > 0 ? 1 : sqrt(1 + 1024 / x1); /* calculate resolution */\n    ab *= f;\n    ac *= f;\n    bc *= f;\n    ex *= f * f; /* increase resolution */\n    xy = 9 * (ab + ac + bc) / 8;\n    cb = 8 * (xa - ya); /* init differences of 1st degree */\n    dx = 27 * (8 * ab * (yb * yb - ya * yc) + ex * (ya + 2 * yb + yc)) / 64 -\n      ya * ya * (xy - ya);\n    dy = 27 * (8 * ab * (xb * xb - xa * xc) - ex * (xa + 2 * xb + xc)) / 64 -\n      xa * xa * (xy + xa);\n    /* init differences of 2nd degree */\n    xx = 3 * (3 * ab * (3 * yb * yb - ya * ya - 2 * ya * yc) - ya * (3 * ac * (\n      ya + yb) + ya * cb)) / 4;\n    yy = 3 * (3 * ab * (3 * xb * xb - xa * xa - 2 * xa * xc) - xa * (3 * ac * (\n      xa + xb) + xa * cb)) / 4;\n    xy = xa * ya * (6 * ab + 6 * ac - 3 * bc + cb);\n    ac = ya * ya;\n    cb = xa * xa;\n    xy = 3 * (xy + 9 * f * (cb * yb * yc - xb * xc * ac) - 18 * xb * yb * ab) /\n      8;\n\n    if (ex < 0) { /* negate values if inside self-intersection loop */\n      dx = -dx;\n      dy = -dy;\n      xx = -xx;\n      yy = -yy;\n      xy = -xy;\n      ac = -ac;\n      cb = -cb;\n    } /* init differences of 3rd degree */\n    ab = 6 * ya * ac;\n    ac = -6 * xa * ac;\n    bc = 6 * ya * cb;\n    cb = -6 * xa * cb;\n    dx += xy;\n    ex = dx + dy;\n    dy += xy; /* error of 1st step */\n\n    var exit = false;\n    for (pxy = xy, fx = fy = f; x0 != x3 && y0 != y3;) {\n      setPixel(x0, y0); /* plot curve */\n      do { /* move sub-steps of one pixel */\n        if (dx > pxy || dy < pxy) {\n          exit = true;\n          break;\n        } /* confusing values */\n        y1 = 2 * ex - dy; /* save value for test of y step */\n        if (2 * ex >= dx) { /* x sub-step */\n          fx--;\n          ex += dx += xx;\n          dy += xy += ac;\n          yy += bc;\n          xx += ab;\n        }\n        if (y1 <= 0) { /* y sub-step */\n          fy--;\n          ex += dy += yy;\n          dx += xy += bc;\n          xx += ac;\n          yy += cb;\n        }\n      } while (fx > 0 && fy > 0); /* pixel complete? */\n      if (2 * fx <= f) {\n        x0 += sx;\n        fx += f;\n      } /* x step */\n      if (2 * fy <= f) {\n        y0 += sy;\n        fy += f;\n      } /* y step */\n      if (pxy == xy && dx < 0 && dy > 0) pxy = EP; /* pixel ahead valid */\n    }\n    if (exit) {\n      xx = x0;\n      x0 = x3;\n      x3 = xx;\n      sx = -sx;\n      xb = -xb; /* swap legs */\n    }\n    yy = y0;\n    y0 = y3;\n    y3 = yy;\n    sy = -sy;\n    yb = -yb;\n    x1 = x2;\n  } while (leg--); /* try other end */\n  line(x0, y0, x3, y3, setPixel); /* remaining part in case of cusp or crunode */\n}\n\n/**\n * plot any cubic Bezier curve\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {number} x3\n * @param  {number} y3\n * @param  {setPixel} setPixel\n */\nexport function cubicBezier(x0, y0, x1, y1, x2, y2, x3, y3, setPixel) {\n  var n = 0, i = 0;\n  var xc = x0 + x1 - x2 - x3,\n      xa = xc - 4 * (x1 - x2);\n  var xb = x0 - x1 - x2 + x3,\n      xd = xb + 4 * (x1 + x2);\n  var yc = y0 + y1 - y2 - y3,\n      ya = yc - 4 * (y1 - y2);\n  var yb = y0 - y1 - y2 + y3,\n      yd = yb + 4 * (y1 + y2);\n  var fx0 = x0,\n      fx1, fx2, fx3, fy0 = y0,\n      fy1, fy2, fy3;\n  var t1 = xb * xb - xa * xc,\n      t2, t = [0, 0, 0, 0, 0];\n  /* sub-divide curve at gradient sign changes */\n  if (xa == 0) { /* horizontal */\n    if (abs(xc) < 2 * abs(xb)) t[n++] = xc / (2.0 * xb); /* one change */\n  } else if (t1 > 0.0) { /* two changes */\n    t2 = sqrt(t1);\n    t1 = (xb - t2) / xa;\n    if (abs(t1) < 1.0) t[n++] = t1;\n    t1 = (xb + t2) / xa;\n    if (abs(t1) < 1.0) t[n++] = t1;\n  }\n  t1 = yb * yb - ya * yc;\n  if (ya == 0) { /* vertical */\n    if (abs(yc) < 2 * abs(yb)) t[n++] = yc / (2.0 * yb); /* one change */\n  } else if (t1 > 0.0) { /* two changes */\n    t2 = sqrt(t1);\n    t1 = (yb - t2) / ya;\n    if (abs(t1) < 1.0) t[n++] = t1;\n    t1 = (yb + t2) / ya;\n    if (abs(t1) < 1.0) t[n++] = t1;\n  }\n  for (i = 1; i < n; i++) /* bubble sort of 4 points */\n    if ((t1 = t[i - 1]) > t[i]) {\n      t[i - 1] = t[i];\n      t[i] = t1;\n      i = 0;\n    }\n\n  t1 = -1.0;\n  t[n] = 1.0; /* begin / end point */\n  for (i = 0; i <= n; i++) { /* plot each segment separately */\n    t2 = t[i]; /* sub-divide at t[i-1], t[i] */\n    fx1 = (t1 * (t1 * xb - 2 * xc) - t2 * (t1 * (t1 * xa - 2 * xb) + xc) + xd) / 8 - fx0;\n    fy1 = (t1 * (t1 * yb - 2 * yc) - t2 * (t1 * (t1 * ya - 2 * yb) + yc) + yd) / 8 - fy0;\n    fx2 = (t2 * (t2 * xb - 2 * xc) - t1 * (t2 * (t2 * xa - 2 * xb) + xc) + xd) / 8 - fx0;\n    fy2 = (t2 * (t2 * yb - 2 * yc) - t1 * (t2 * (t2 * ya - 2 * yb) + yc) + yd) / 8 - fy0;\n    fx0 -= fx3 = (t2 * (t2 * (3 * xb - t2 * xa) - 3 * xc) + xd) / 8;\n    fy0 -= fy3 = (t2 * (t2 * (3 * yb - t2 * ya) - 3 * yc) + yd) / 8;\n    x3 = floor(fx3 + 0.5);\n    y3 = floor(fy3 + 0.5); /* scale bounds to int */\n    if (fx0 != 0.0) {\n      fx1 *= fx0 = (x0 - x3) / fx0;\n      fx2 *= fx0;\n    }\n    if (fy0 != 0.0) {\n      fy1 *= fy0 = (y0 - y3) / fy0;\n      fy2 *= fy0;\n    }\n    if (x0 != x3 || y0 != y3) /* segment t1 - t2 */\n      plotCubicBezierSeg(x0, y0, x0 + fx1, y0 + fy1, x0 + fx2, y0 + fy2, x3, y3, setPixel);\n    x0 = x3;\n    y0 = y3;\n    fx0 = fx3;\n    fy0 = fy3;\n    t1 = t2;\n  }\n}\n\n/**\n * Draw a black (0) anti-aliased line on white (255) background\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {setPixelAlpha} setPixelAA\n * @return {number}\n */\nexport function lineAA(x0, y0, x1, y1, setPixelAA) {\n  var sx = x0 < x1 ? 1 : -1,\n      sy = y0 < y1 ? 1 : -1,\n      x2;\n  var dx = abs(x1 - x0),\n      dy = abs(y1 - y0),\n      err = dx * dx + dy * dy;\n  var e2 = err == 0 ? 1 : 0xffff7f / sqrt(err); /* multiplication factor */\n\n  dx *= e2;\n  dy *= e2;\n  err = dx - dy; /* error value e_xy */\n  for (;;) { /* pixel loop */\n    setPixelAA(x0, y0, abs(err - dx + dy) >> 16);\n    e2 = err;\n    x2 = x0;\n    if (2 * e2 >= -dx) { /* x step */\n      if (x0 == x1) break;\n      if (e2 + dy < 0xff0000) setPixelAA(x0, y0 + sy, (e2 + dy) >> 16);\n      err -= dy;\n      x0 += sx;\n    }\n    if (2 * e2 <= dy) { /* y step */\n      if (y0 == y1) break;\n      if (dx - e2 < 0xff0000) setPixelAA(x2 + sx, y0, (dx - e2) >> 16);\n      err += dx;\n      y0 += sy;\n    }\n  }\n}\n\n/**\n * Draw a black anti-aliased circle on white background\n * @param  {number} xm\n * @param  {number} ym\n * @param  {number} r\n * @param  {setPixelAlpha} setPixelAA\n */\nexport function circleAA(xm, ym, r, setPixelAA) {\n  var x = -r,\n      y = 0; /* II. quadrant from bottom left to top right */\n  var i, x2, e2, err = 2 - 2 * r; /* error of 1.step */\n  r = 1 - err;\n  do {\n    i = 255 * abs(err - 2 * (x + y) - 2) / r; /* get blend value of pixel */\n    setPixelAA(xm - x, ym + y, i); /*   I. Quadrant */\n    setPixelAA(xm - y, ym - x, i); /*  II. Quadrant */\n    setPixelAA(xm + x, ym - y, i); /* III. Quadrant */\n    setPixelAA(xm + y, ym + x, i); /*  IV. Quadrant */\n    e2 = err;\n    x2 = x; /* remember values */\n    if (err + y > 0) { /* x step */\n      i = 255 * (err - 2 * x - 1) / r; /* outward pixel */\n      if (i < 256) {\n        setPixelAA(xm - x, ym + y + 1, i);\n        setPixelAA(xm - y - 1, ym - x, i);\n        setPixelAA(xm + x, ym - y - 1, i);\n        setPixelAA(xm + y + 1, ym + x, i);\n      }\n      err += ++x * 2 + 1;\n    }\n    if (e2 + x2 <= 0) { /* y step */\n      i = 255 * (2 * y + 3 - e2) / r; /* inward pixel */\n      if (i < 256) {\n        setPixelAA(xm - x2 - 1, ym + y, i);\n        setPixelAA(xm - y, ym - x2 - 1, i);\n        setPixelAA(xm + x2 + 1, ym - y, i);\n        setPixelAA(xm + y, ym + x2 + 1, i);\n      }\n      err += ++y * 2 + 1;\n    }\n  } while (x < 0);\n}\n\n/**\n * Draw an limited anti-aliased quadratic Bezier segment\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {setPixelAlpha} setPixelAA\n */\nexport function quadBezierSegmentAA(x0, y0, x1, y1, x2, y2, setPixelAA) {\n  var sx = x2 - x1,\n      sy = y2 - y1;\n  var xx = x0 - x1,\n      yy = y0 - y1,\n      xy; /* relative values for checks */\n  var dx, dy, err, ed, cur = xx * sy - yy * sx; /* curvature */\n\n  // assert(xx*sx <= 0 && yy*sy <= 0, 'sign of gradient must not change');\n\n  if (sx * sx + sy * sy > xx * xx + yy * yy) { /* begin with longer part */\n    x2 = x0;\n    x0 = sx + x1;\n    y2 = y0;\n    y0 = sy + y1;\n    cur = -cur; /* swap P0 P2 */\n  }\n  if (cur != 0) { /* no straight line */\n    xx += sx;\n    xx *= sx = x0 < x2 ? 1 : -1; /* x step direction */\n    yy += sy;\n    yy *= sy = y0 < y2 ? 1 : -1; /* y step direction */\n    xy = 2 * xx * yy;\n    xx *= xx;\n    yy *= yy; /* differences 2nd degree */\n    if (cur * sx * sy < 0) { /* negated curvature? */\n      xx = -xx;\n      yy = -yy;\n      xy = -xy;\n      cur = -cur;\n    }\n    dx = 4.0 * sy * (x1 - x0) * cur + xx - xy; /* differences 1st degree */\n    dy = 4.0 * sx * (y0 - y1) * cur + yy - xy;\n    xx += xx;\n    yy += yy;\n    err = dx + dy + xy; /* error 1st step */\n    do {\n      cur = min(dx + xy, -xy - dy);\n      ed = max(dx + xy, -xy - dy); /* approximate error distance */\n      ed += 2 * ed * cur * cur / (4 * ed * ed + cur * cur);\n      setPixelAA(x0, y0, 255 * abs(err - dx - dy - xy) / ed); /* plot curve */\n      if (x0 == x2 || y0 == y2) break; /* last pixel -> curve finished */\n      x1 = x0;\n      cur = dx - err;\n      y1 = 2 * err + dy < 0;\n      if (2 * err + dx > 0) { /* x step */\n        if (err - dy < ed) setPixelAA(x0, y0 + sy, 255 * abs(err - dy) / ed);\n        x0 += sx;\n        dx -= xy;\n        err += dy += yy;\n      }\n      if (y1) { /* y step */\n        if (cur < ed) setPixelAA(x1 + sx, y0, 255 * abs(cur) / ed);\n        y0 += sy;\n        dy -= xy;\n        err += dx += xx;\n      }\n    } while (dy < dx); /* gradient negates -> close curves */\n  }\n  lineAA(x0, y0, x2, y2, setPixelAA); /* plot remaining needle to end */\n}\n\n/**\n * draw an anti-aliased rational quadratic Bezier segment, squared weight\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {number} w\n * @param  {setPixelAlpha} setPixelAA\n */\nexport function quadRationalBezierSegmentAA(x0, y0, x1, y1, x2, y2, w, setPixelAA) {\n  var sx = x2 - x1,\n      sy = y2 - y1; /* relative values for checks */\n  var dx = x0 - x2,\n      dy = y0 - y2,\n      xx = x0 - x1,\n      yy = y0 - y1;\n  var xy = xx * sy + yy * sx,\n      cur = xx * sy - yy * sx,\n      err, ed; /* curvature */\n  var f;\n\n  assert(xx * sx <= 0.0 && yy * sy <= 0.0); /* sign of gradient must not change */\n\n  if (cur != 0.0 && w > 0.0) { /* no straight line */\n    if (sx * sx + sy * sy > xx * xx + yy * yy) { /* begin with longer part */\n      x2 = x0;\n      x0 -= dx;\n      y2 = y0;\n      y0 -= dy;\n      cur = -cur; /* swap P0 P2 */\n    }\n    xx = 2.0 * (4.0 * w * sx * xx + dx * dx); /* differences 2nd degree */\n    yy = 2.0 * (4.0 * w * sy * yy + dy * dy);\n    sx = x0 < x2 ? 1 : -1; /* x step direction */\n    sy = y0 < y2 ? 1 : -1; /* y step direction */\n    xy = -2.0 * sx * sy * (2.0 * w * xy + dx * dy);\n\n    if (cur * sx * sy < 0) { /* negated curvature? */\n      xx = -xx;\n      yy = -yy;\n      cur = -cur;\n      xy = -xy;\n    }\n    dx = 4.0 * w * (x1 - x0) * sy * cur + xx / 2.0 + xy; /* differences 1st degree */\n    dy = 4.0 * w * (y0 - y1) * sx * cur + yy / 2.0 + xy;\n\n    if (w < 0.5 && dy > dx) { /* flat ellipse, algorithm fails */\n      cur = (w + 1.0) / 2.0;\n      w = sqrt(w);\n      xy = 1.0 / (w + 1.0);\n      sx = floor((x0 + 2.0 * w * x1 + x2) * xy / 2.0 + 0.5); /* subdivide curve in half  */\n      sy = floor((y0 + 2.0 * w * y1 + y2) * xy / 2.0 + 0.5);\n      dx = floor((w * x1 + x0) * xy + 0.5);\n      dy = floor((y1 * w + y0) * xy + 0.5);\n      quadRationalBezierSegmentAA(x0, y0, dx, dy, sx, sy, cur, setPixelAA); /* plot apart */\n      dx = floor((w * x1 + x2) * xy + 0.5);\n      dy = floor((y1 * w + y2) * xy + 0.5);\n      return quadRationalBezierSegmentAA(sx, sy, dx, dy, x2, y2, cur,\n        setPixelAA);\n    }\n    err = dx + dy - xy; /* error 1st step */\n    do { /* pixel loop */\n      cur = min(dx - xy, xy - dy);\n      ed = max(dx - xy, xy - dy);\n      ed += 2 * ed * cur * cur / (4. * ed * ed + cur * cur); /* approximate error distance */\n      x1 = 255 * abs(err - dx - dy + xy) / ed; /* get blend value by pixel error */\n      if (x1 < 256) setPixelAA(x0, y0, x1); /* plot curve */\n      if (f = 2 * err + dy < 0) { /* y step */\n        if (y0 == y2) return; /* last pixel -> curve finished */\n        if (dx - err < ed) setPixelAA(x0 + sx, y0, 255 * abs(dx - err) / ed);\n      }\n      if (2 * err + dx > 0) { /* x step */\n        if (x0 == x2) return; /* last pixel -> curve finished */\n        if (err - dy < ed) setPixelAA(x0, y0 + sy, 255 * abs(err - dy) / ed);\n        x0 += sx;\n        dx += xy;\n        err += dy += yy;\n      }\n      if (f) {\n        y0 += sy;\n        dy += xy;\n        err += dx += xx;\n      } /* y step */\n    } while (dy < dx); /* gradient negates -> algorithm fails */\n  }\n  lineAA(x0, y0, x2, y2, setPixelAA); /* plot remaining needle to end */\n}\n\n/**\n * Plot an anti-aliased line of width wd\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} wd\n * @param  {setPixel} setPixel\n */\nexport function lineWidth(x0, y0, x1, y1, wd, setPixel) {\n  let dx = abs(x1 - x0),\n      sx = x0 < x1 ? 1 : -1;\n  let dy = abs(y1 - y0),\n      sy = y0 < y1 ? 1 : -1;\n  let err = dx - dy,\n      e2, x2, y2; /* error value e_xy */\n  let ed = dx + dy == 0 ? 1 : sqrt(dx * dx + dy * dy);\n\n  for (wd = (wd + 1) / 2;;) { /* pixel loop */\n    setPixel(x0, y0, max(0, 255 * (abs(err - dx + dy) / ed - wd + 1)));\n    e2 = err;\n    x2 = x0;\n    if (2 * e2 >= -dx) { /* x step */\n      for (e2 += dy, y2 = y0; e2 < ed * wd && (y1 != y2 || dx > dy); e2 += dx)\n        setPixel(x0, y2 += sy, max(0, 255 * (abs(e2) / ed - wd + 1)));\n      if (x0 == x1) break;\n      e2 = err;\n      err -= dy;\n      x0 += sx;\n    }\n    if (2 * e2 <= dy) { /* y step */\n      for (e2 = dx - e2; e2 < ed * wd && (x1 != x2 || dx < dy); e2 += dy)\n        setPixel(x2 += sx, y0, max(0, 255 * (abs(e2) / ed - wd + 1)));\n      if (y0 == y1) break;\n      err += dx;\n      y0 += sy;\n    }\n  }\n}\n"],"names":[],"mappings":"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"}