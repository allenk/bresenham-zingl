{"version":3,"file":"bresenham.js.map","sources":["../src/line.js","../src/assert.js","../src/bezier/rational.js","../src/ellipse.js","../src/circle.js","../src/bezier/quadratic.js","../src/bezier/cubic.js","../index.js"],"sourcesContent":["/**\n * Line segment rasterisation\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {setPixel} setPixel\n */\nexport function line(x0, y0, x1, y1, setPixel) {\n  var dx = Math.abs(x1 - x0),\n      sx = x0 < x1 ? 1 : -1;\n  var dy = -Math.abs(y1 - y0),\n      sy = y0 < y1 ? 1 : -1;\n  var err = dx + dy, e2; /* error value e_xy */\n\n  for (;;) { /* loop */\n    setPixel(x0, y0);\n    e2 = 2 * err;\n    if (e2 >= dy) { /* e_xy+e_x > 0 */\n      if (x0 === x1) break;\n      err += dy;\n      x0 += sx;\n    }\n    if (e2 <= dx) { /* e_xy+e_y < 0 */\n      if (y0 === y1) break;\n      err += dx;\n      y0 += sy;\n    }\n  }\n}\n\n\n/**\n * Draw a black (0) anti-aliased line on white (255) background\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {setPixelAlpha} setPixelAA\n * @return {number}\n */\nexport function lineAA(x0, y0, x1, y1, setPixelAA) {\n  var sx = x0 < x1 ? 1 : -1,\n      sy = y0 < y1 ? 1 : -1,\n      x2;\n  var dx = Math.abs(x1 - x0),\n      dy = Math.abs(y1 - y0),\n      err = dx * dx + dy * dy;\n  var e2 = err == 0 ? 1 : 0xffff7f / Math.sqrt(err); /* multiplication factor */\n\n  dx *= e2;\n  dy *= e2;\n  err = dx - dy; /* error value e_xy */\n  for (;;) { /* pixel loop */\n    setPixelAA(x0, y0, Math.abs(err - dx + dy) >> 16);\n    e2 = err;\n    x2 = x0;\n    if (2 * e2 >= -dx) { /* x step */\n      if (x0 == x1) break;\n      if (e2 + dy < 0xff0000) setPixelAA(x0, y0 + sy, (e2 + dy) >> 16);\n      err -= dy;\n      x0 += sx;\n    }\n    if (2 * e2 <= dy) { /* y step */\n      if (y0 == y1) break;\n      if (dx - e2 < 0xff0000) setPixelAA(x2 + sx, y0, (dx - e2) >> 16);\n      err += dx;\n      y0 += sy;\n    }\n  }\n}\n\n\n/**\n * Plot an anti-aliased line of width wd\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} wd\n * @param  {setPixel} setPixel\n */\nexport function lineWidth(x0, y0, x1, y1, wd, setPixel) {\n  let dx = Math.abs(x1 - x0),\n      sx = x0 < x1 ? 1 : -1;\n  let dy = Math.abs(y1 - y0),\n      sy = y0 < y1 ? 1 : -1;\n  let err = dx - dy,\n      e2, x2, y2; /* error value e_xy */\n  let ed = dx + dy == 0 ? 1 : Math.sqrt(dx * dx + dy * dy);\n\n  for (wd = (wd + 1) / 2;;) { /* pixel loop */\n    setPixel(x0, y0, Math.max(0, 255 * (Math.abs(err - dx + dy) / ed - wd + 1)));\n    e2 = err;\n    x2 = x0;\n    if (2 * e2 >= -dx) { /* x step */\n      for (e2 += dy, y2 = y0; e2 < ed * wd && (y1 != y2 || dx > dy); e2 += dx)\n        setPixel(x0, y2 += sy, Math.max(0, 255 * (Math.abs(e2) / ed - wd + 1)));\n      if (x0 == x1) break;\n      e2 = err;\n      err -= dy;\n      x0 += sx;\n    }\n    if (2 * e2 <= dy) { /* y step */\n      for (e2 = dx - e2; e2 < ed * wd && (x1 != x2 || dx < dy); e2 += dy)\n        setPixel(x2 += sx, y0, Math.max(0, 255 * (Math.abs(e2) / ed - wd + 1)));\n      if (y0 == y1) break;\n      err += dx;\n      y0 += sy;\n    }\n  }\n}\n","export default function assert(d, m = 'assert error') {\n  if (!d) throw new Error(m);\n}\n","import assert from '../assert';\nimport { line, lineAA } from '../line';\n\n/**\n * plot any quadratic rational Bezier curve\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {number} w\n * @param  {setPixel} setPixel\n */\nexport function quadRationalBezier(x0, y0, x1, y1, x2, y2, w, setPixel) {\n  var x = x0 - 2 * x1 + x2,\n      y = y0 - 2 * y1 + y2;\n  var xx = x0 - x1,\n      yy = y0 - y1,\n      ww, t, q;\n\n  assert(w >= 0.0, 'width is negative');\n\n  if (xx * (x2 - x1) > 0) { /* horizontal cut at P4? */\n    if (yy * (y2 - y1) > 0) /* vertical cut at P6 too? */\n      if (Math.abs(xx * y) > Math.abs(yy * x)) { /* which first? */\n        x0 = x2;\n        x2 = xx + x1;\n        y0 = y2;\n        y2 = yy + y1; /* swap points */\n      } /* now horizontal cut at P4 comes first */\n    if (x0 == x2 || w == 1) t = (x0 - x1) / x;\n    else { /* non-rational or rational case */\n      q = Math.sqrt(4 * w * w * (x0 - x1) * (x2 - x1) + (x2 - x0) * (x2 - x0));\n      if (x1 < x0) q = -q;\n      t = (2 * w * (x0 - x1) - x0 + x2 + q) / (2 * (1 - w) * (x2 - x0)); /* t at P4 */\n    }\n    q = 1 / (2 * t * (1 - t) * (w - 1) + 1); /* sub-divide at t */\n    xx = (t * t * (x0 - 2 * w * x1 + x2) + 2 * t * (w * x1 - x0) + x0) * q; /* = P4 */\n    yy = (t * t * (y0 - 2 * w * y1 + y2) + 2 * t * (w * y1 - y0) + y0) * q;\n    ww = t * (w - 1) + 1;\n    ww *= ww * q; /* squared weight P3 */\n    w = ((1 - t) * (w - 1) + 1) * Math.sqrt(q); /* weight P8 */\n    x = Math.floor(xx + 0.5);\n    y = Math.floor(yy + 0.5); /* P4 */\n    yy = (xx - x0) * (y1 - y0) / (x1 - x0) + y0; /* intersect P3 | P0 P1 */\n    quadRationalBezierSegment(x0, y0, x, Math.floor(yy + 0.5), x, y, ww, setPixel);\n    yy = (xx - x2) * (y1 - y2) / (x1 - x2) + y2; /* intersect P4 | P1 P2 */\n    y1 = Math.floor(yy + 0.5);\n    x0 = x1 = x;\n    y0 = y; /* P0 = P4, P1 = P8 */\n  }\n  if ((y0 - y1) * (y2 - y1) > 0) { /* vertical cut at P6? */\n    if (y0 == y2 || w == 1) t = (y0 - y1) / (y0 - 2 * y1 + y2);\n    else { /* non-rational or rational case */\n      q = Math.sqrt(4 * w * w * (y0 - y1) * (y2 - y1) + (y2 - y0) * (y2 - y0));\n      if (y1 < y0) q = -q;\n      t = (2 * w * (y0 - y1) - y0 + y2 + q) / (2 * (1 - w) * (y2 - y0)); /* t at P6 */\n    }\n    q = 1 / (2 * t * (1 - t) * (w - 1) + 1); /* sub-divide at t */\n    xx = (t * t * (x0 - 2 * w * x1 + x2) + 2 * t * (w * x1 - x0) + x0) * q; /* = P6 */\n    yy = (t * t * (y0 - 2 * w * y1 + y2) + 2 * t * (w * y1 - y0) + y0) * q;\n    ww = t * (w - 1) + 1;\n    ww *= ww * q; /* squared weight P5 */\n    w = ((1 - t) * (w - 1) + 1) * Math.sqrt(q); /* weight P7 */\n    x = Math.floor(xx + 0.5);\n    y = Math.floor(yy + 0.5); /* P6 */\n    xx = (x1 - x0) * (yy - y0) / (y1 - y0) + x0; /* intersect P6 | P0 P1 */\n    quadRationalBezierSegment(x0, y0, Math.floor(xx + 0.5), y, x, y, ww, setPixel);\n    xx = (x1 - x2) * (yy - y2) / (y1 - y2) + x2; /* intersect P7 | P1 P2 */\n    x1 = Math.floor(xx + 0.5);\n    x0 = x;\n    y0 = y1 = y; /* P0 = P6, P1 = P7 */\n  }\n  quadRationalBezierSegment(x0, y0, x1, y1, x2, y2, w * w, setPixel); /* remaining */\n}\n\n/**\n * plot a limited rational Bezier segment, squared weight\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {number} w\n * @param  {setPixel} setPixel\n */\nexport function quadRationalBezierSegment(x0, y0, x1, y1, x2, y2, w, setPixel) {\n  var sx = x2 - x1,\n      sy = y2 - y1; /* relative values for checks */\n  var dx = x0 - x2,\n      dy = y0 - y2,\n      xx = x0 - x1,\n      yy = y0 - y1;\n  var xy = xx * sy + yy * sx,\n      cur = xx * sy - yy * sx,\n      err; /* curvature */\n\n  assert(xx * sx <= 0.0 && yy * sy <= 0.0, 'sign of gradient must not change');\n\n  if (cur != 0.0 && w > 0.0) { /* no straight line */\n    if (sx * sx + sy * sy > xx * xx + yy * yy) { /* begin with longer part */\n      x2 = x0;\n      x0 -= dx;\n      y2 = y0;\n      y0 -= dy;\n      cur = -cur; /* swap P0 P2 */\n    }\n    xx = 2 * (4 * w * sx * xx + dx * dx); /* differences 2nd degree */\n    yy = 2 * (4 * w * sy * yy + dy * dy);\n    sx = x0 < x2 ? 1 : -1; /* x step direction */\n    sy = y0 < y2 ? 1 : -1; /* y step direction */\n    xy = -2 * sx * sy * (2 * w * xy + dx * dy);\n\n    if (cur * sx * sy < 0.0) { /* negated curvature? */\n      xx = -xx;\n      yy = -yy;\n      xy = -xy;\n      cur = -cur;\n    }\n    dx = 4 * w * (x1 - x0) * sy * cur + xx / 2 + xy; /* differences 1st degree */\n    dy = 4 * w * (y0 - y1) * sx * cur + yy / 2 + xy;\n\n    if (w < 0.5 && (dy > xy || dx < xy)) { /* flat ellipse, algorithm fails */\n      cur = (w + 1) / 2;\n      w = Math.sqrt(w);\n      xy = 1 / (w + 1);\n      sx = Math.floor((x0 + 2 * w * x1 + x2) * xy / 2 + 0.5); /* subdivide curve in half */\n      sy = Math.floor((y0 + 2 * w * y1 + y2) * xy / 2 + 0.5);\n      dx = Math.floor((w * x1 + x0) * xy + 0.5);\n      dy = Math.floor((y1 * w + y0) * xy + 0.5, setPixel);\n      quadRationalBezierSegment(x0, y0, dx, dy, sx, sy, cur); /* plot separately */\n      dx = Math.floor((w * x1 + x2) * xy + 0.5);\n      dy = Math.floor((y1 * w + y2) * xy + 0.5, setPixel);\n      quadRationalBezierSegment(sx, sy, dx, dy, x2, y2, cur, setPixel);\n      return;\n    }\n    err = dx + dy - xy; /* error 1.step */\n    do {\n      setPixel(x0, y0); /* plot curve */\n      if (x0 == x2 && y0 == y2) return; /* last pixel -> curve finished */\n      x1 = 2 * err > dy;\n      y1 = 2 * (err + yy) < -dy; /* save value for test of x step */\n      if (2 * err < dx || y1) {\n        y0 += sy;\n        dy += xy;\n        err += dx += xx;\n      } /* y step */\n      if (2 * err > dx || x1) {\n        x0 += sx;\n        dx += xy;\n        err += dy += yy;\n      } /* x step */\n    } while (dy <= xy && dx >= xy); /* gradient negates -> algorithm fails */\n  }\n  line(x0, y0, x2, y2, setPixel); /* plot remaining needle to end */\n}\n\n\n/**\n * draw an anti-aliased rational quadratic Bezier segment, squared weight\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {number} w\n * @param  {setPixelAlpha} setPixelAA\n */\nexport function quadRationalBezierSegmentAA(x0, y0, x1, y1, x2, y2, w, setPixelAA) {\n  var sx = x2 - x1,\n      sy = y2 - y1; /* relative values for checks */\n  var dx = x0 - x2,\n      dy = y0 - y2,\n      xx = x0 - x1,\n      yy = y0 - y1;\n  var xy = xx * sy + yy * sx,\n      cur = xx * sy - yy * sx,\n      err, ed; /* curvature */\n  var f;\n\n  assert(xx * sx <= 0.0 && yy * sy <= 0.0); /* sign of gradient must not change */\n\n  if (cur != 0.0 && w > 0.0) { /* no straight line */\n    if (sx * sx + sy * sy > xx * xx + yy * yy) { /* begin with longer part */\n      x2 = x0;\n      x0 -= dx;\n      y2 = y0;\n      y0 -= dy;\n      cur = -cur; /* swap P0 P2 */\n    }\n    xx = 2 * (4 * w * sx * xx + dx * dx); /* differences 2nd degree */\n    yy = 2 * (4 * w * sy * yy + dy * dy);\n    sx = x0 < x2 ? 1 : -1; /* x step direction */\n    sy = y0 < y2 ? 1 : -1; /* y step direction */\n    xy = -2 * sx * sy * (2 * w * xy + dx * dy);\n\n    if (cur * sx * sy < 0) { /* negated curvature? */\n      xx = -xx;\n      yy = -yy;\n      cur = -cur;\n      xy = -xy;\n    }\n    dx = 4 * w * (x1 - x0) * sy * cur + xx / 2 + xy; /* differences 1st degree */\n    dy = 4 * w * (y0 - y1) * sx * cur + yy / 2 + xy;\n\n    if (w < 0.5 && dy > dx) { /* flat ellipse, algorithm fails */\n      cur = (w + 1) / 2;\n      w = Math.sqrt(w);\n      xy = 1 / (w + 1);\n      sx = Math.floor((x0 + 2 * w * x1 + x2) * xy / 2 + 0.5); /* subdivide curve in half  */\n      sy = Math.floor((y0 + 2 * w * y1 + y2) * xy / 2 + 0.5);\n      dx = Math.floor((w * x1 + x0) * xy + 0.5);\n      dy = Math.floor((y1 * w + y0) * xy + 0.5);\n      quadRationalBezierSegmentAA(x0, y0, dx, dy, sx, sy, cur, setPixelAA); /* plot apart */\n      dx = Math.floor((w * x1 + x2) * xy + 0.5);\n      dy = Math.floor((y1 * w + y2) * xy + 0.5);\n      return quadRationalBezierSegmentAA(sx, sy, dx, dy, x2, y2, cur,\n        setPixelAA);\n    }\n    err = dx + dy - xy; /* error 1st step */\n    do { /* pixel loop */\n      cur = Math.min(dx - xy, xy - dy);\n      ed = Math.max(dx - xy, xy - dy);\n      ed += 2 * ed * cur * cur / (4. * ed * ed + cur * cur); /* approximate error distance */\n      x1 = 255 * Math.abs(err - dx - dy + xy) / ed; /* get blend value by pixel error */\n      if (x1 < 256) setPixelAA(x0, y0, x1); /* plot curve */\n      if (f = 2 * err + dy < 0) { /* y step */\n        if (y0 == y2) return; /* last pixel -> curve finished */\n        if (dx - err < ed) setPixelAA(x0 + sx, y0, 255 * Math.abs(dx - err) / ed);\n      }\n      if (2 * err + dx > 0) { /* x step */\n        if (x0 == x2) return; /* last pixel -> curve finished */\n        if (err - dy < ed) setPixelAA(x0, y0 + sy, 255 * Math.abs(err - dy) / ed);\n        x0 += sx;\n        dx += xy;\n        err += dy += yy;\n      }\n      if (f) {\n        y0 += sy;\n        dy += xy;\n        err += dx += xx;\n      } /* y step */\n    } while (dy < dx); /* gradient negates -> algorithm fails */\n  }\n  lineAA(x0, y0, x2, y2, setPixelAA); /* plot remaining needle to end */\n}\n","import assert from './assert';\nimport { quadRationalBezierSegment } from './bezier/rational';\n\n/**\n * Draws ellipse\n * @param  {number} xm\n * @param  {number} ym\n * @param  {number} a\n * @param  {number} b\n * @param  {setPixel} setPixel\n */\nexport function ellipse(xm, ym, a, b, setPixel) {\n  var x = -a, y = 0; /* II. quadrant from bottom left to top right */\n  var e2 = b * b, err = x * (2 * e2 + x) + e2; /* error of 1.step */\n\n  do {\n    setPixel(xm - x, ym + y); /*   I. Quadrant */\n    setPixel(xm + x, ym + y); /*  II. Quadrant */\n    setPixel(xm + x, ym - y); /* III. Quadrant */\n    setPixel(xm - x, ym - y); /*  IV. Quadrant */\n    e2 = 2 * err;\n    if (e2 >= (x * 2 + 1) * b * b) /* e_xy+e_x > 0 */\n      err += (++x * 2 + 1) * b * b;\n    if (e2 <= (y * 2 + 1) * a * a) /* e_xy+e_y < 0 */\n      err += (++y * 2 + 1) * a * a;\n  } while (x <= 0);\n\n  while (y++ < b) { /* too early stop of flat ellipses a=1, */\n    setPixel(xm, ym + y); /* -> finish tip of ellipse */\n    setPixel(xm, ym - y);\n  }\n}\n\n/**\n * Plot ellipse rotated by angle (radian)\n * @param  {number} x\n * @param  {number} y\n * @param  {number} a\n * @param  {number} b\n * @param  {number} angle\n * @param  {setPixel} setPixel\n */\nexport function rotatedEllipse(x, y, a, b, angle, setPixel) {\n  var xd = a * a,\n      yd = b * b;\n  var s = Math.sin(angle),\n      zd = (xd - yd) * s; /* ellipse rotation */\n  xd = Math.sqrt(xd - zd * s), yd = Math.sqrt(yd + zd * s); /* surrounding rectangle */\n  a = xd + 0.5;\n  b = yd + 0.5;\n  zd = zd * a * b / (xd * yd); /* scale to integer */\n  rotatedEllipseRect(x - a, y - b, x + a, y + b, (4 * zd * Math.cos(angle)), setPixel);\n}\n\n\n/**\n * Rectangle encloMath.sing the ellipse, integer rotation angle\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} zd\n * @param  {setPixel} setPixel\n */\nexport function rotatedEllipseRect(x0, y0, x1, y1, zd, setPixel) {\n   var xd = x1 - x0,\n       yd = y1 - y0;\n   var w = xd * yd;\n   if (zd === 0) return ellipseRect(x0, y0, x1, y1, setPixel);          /* looks nicer */\n   if (w !== 0.0) w = (w - zd) / (w + w);                    /* squared weight of P1 */\n   assert(w <= 1 && w >= 0.0, 'limit angle to |zd|<=xd*yd');\n   xd = Math.floor(xd * w + 0.5);\n   yd = Math.floor(yd * w + 0.5);           /* snap xe,ye to int */\n   quadRationalBezierSegment(x0, y0 + yd, x0, y0, x0 + xd, y0, 1 - w);\n   quadRationalBezierSegment(x0, y0 + yd, x0, y1, x1 - xd, y1, w);\n   quadRationalBezierSegment(x1, y1 - yd, x1, y1, x1 - xd, y1, 1 - w);\n   quadRationalBezierSegment(x1, y1 - yd, x1, y0, x0 + xd, y0, w);\n}\n\n\n\n/**\n * Rectangular parameter encloMath.sing the ellipse\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {setPixel} setPixel\n */\nexport function ellipseRect(x0, y0, x1, y1, setPixel) {\n  var a = Math.abs(x1 - x0),\n      b = Math.abs(y1 - y0),\n      b1 = b & 1; /* diameter */\n  var dx = 4 * (1 - a) * b * b,\n      dy = 4 * (b1 + 1) * a * a; /* error increment */\n  var err = dx + dy + b1 * a * a,\n      e2; /* error of 1.step */\n\n  if (x0 > x1) {\n    x0 = x1;\n    x1 += a;\n  } /* if called with swapped points */\n  if (y0 > y1) y0 = y1; /* .. exchange them */\n  y0 += (b + 1) / 2;\n  y1 = y0 - b1; /* starting pixel */\n  a = 8 * a * a;\n  b1 = 8 * b * b;\n\n  do {\n    setPixel(x1, y0); /*   I. Quadrant */\n    setPixel(x0, y0); /*  II. Quadrant */\n    setPixel(x0, y1); /* III. Quadrant */\n    setPixel(x1, y1); /*  IV. Quadrant */\n    e2 = 2 * err;\n    if (e2 <= dy) {\n      y0++;\n      y1--;\n      err += dy += a;\n    } /* y step */\n    if (e2 >= dx || 2 * err > dy) {\n      x0++;\n      x1--;\n      err += dx += b1;\n    } /* x step */\n  } while (x0 <= x1);\n\n  while (y0 - y1 <= b) { /* too early stop of flat ellipses a=1 */\n    setPixel(x0 - 1, y0); /* -> finish tip of ellipse */\n    setPixel(x1 + 1, y0++);\n    setPixel(x0 - 1, y1);\n    setPixel(x1 + 1, y1--);\n  }\n}\n","/**\n * Circle rasterisation\n * @param  {number} xm\n * @param  {number} ym\n * @param  {number} r\n * @param  {setPixel} setPixel\n */\nexport function circle(xm, ym, r, setPixel) {\n  var x = -r, y = 0, err = 2 - 2 * r; /* bottom left to top right */\n  do {\n    setPixel(xm - x, ym + y); /*   I. Quadrant +x +y */\n    setPixel(xm - y, ym - x); /*  II. Quadrant -x +y */\n    setPixel(xm + x, ym - y); /* III. Quadrant -x -y */\n    setPixel(xm + y, ym + x); /*  IV. Quadrant +x -y */\n    r = err;\n    if (r <= y) err += ++y * 2 + 1; /* e_xy+e_y < 0 */\n    if (r > x || err > y) /* e_xy+e_x > 0 or no 2nd y-step */\n      err += ++x * 2 + 1; /* -> x-step now */\n  } while (x < 0);\n}\n\n/**\n * Draw a black anti-aliased circle on white background\n * @param  {number} xm\n * @param  {number} ym\n * @param  {number} r\n * @param  {setPixelAlpha} setPixelAA\n */\nexport function circleAA(xm, ym, r, setPixelAA) {\n  var x = -r,\n      y = 0; /* II. quadrant from bottom left to top right */\n  var i, x2, e2, err = 2 - 2 * r; /* error of 1.step */\n  r = 1 - err;\n  do {\n    i = 255 * Math.abs(err - 2 * (x + y) - 2) / r; /* get blend value of pixel */\n    setPixelAA(xm - x, ym + y, i); /*   I. Quadrant */\n    setPixelAA(xm - y, ym - x, i); /*  II. Quadrant */\n    setPixelAA(xm + x, ym - y, i); /* III. Quadrant */\n    setPixelAA(xm + y, ym + x, i); /*  IV. Quadrant */\n    e2 = err;\n    x2 = x; /* remember values */\n    if (err + y > 0) { /* x step */\n      i = 255 * (err - 2 * x - 1) / r; /* outward pixel */\n      if (i < 256) {\n        setPixelAA(xm - x, ym + y + 1, i);\n        setPixelAA(xm - y - 1, ym - x, i);\n        setPixelAA(xm + x, ym - y - 1, i);\n        setPixelAA(xm + y + 1, ym + x, i);\n      }\n      err += ++x * 2 + 1;\n    }\n    if (e2 + x2 <= 0) { /* y step */\n      i = 255 * (2 * y + 3 - e2) / r; /* inward pixel */\n      if (i < 256) {\n        setPixelAA(xm - x2 - 1, ym + y, i);\n        setPixelAA(xm - y, ym - x2 - 1, i);\n        setPixelAA(xm + x2 + 1, ym - y, i);\n        setPixelAA(xm + y, ym + x2 + 1, i);\n      }\n      err += ++y * 2 + 1;\n    }\n  } while (x < 0);\n}\n","import assert from '../assert';\nimport { line, lineAA } from '../line';\n\n/**\n * Plot any quadratic Bezier curve\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {setPixel} setPixel\n */\nexport function quadBezier(x0, y0, x1, y1, x2, y2, setPixel) {\n  var x = x0 - x1,\n      y = y0 - y1;\n  var t = x0 - 2 * x1 + x2, r;\n\n  if (x * (x2 - x1) > 0) { /* horizontal cut at P4? */\n    if (y * (y2 - y1) > 0) /* vertical cut at P6 too? */\n      if (Math.abs((y0 - 2 * y1 + y2) / t * x) > Math.abs(y)) { /* which first? */\n        x0 = x2;\n        x2 = x + x1;\n        y0 = y2;\n        y2 = y + y1; /* swap points */\n      } /* now horizontal cut at P4 comes first */\n    t = (x0 - x1) / t;\n    r = (1 - t) * ((1 - t) * y0 + 2 * t * y1) + t * t * y2; /* By(t=P4) */\n    t = (x0 * x2 - x1 * x1) * t / (x0 - x1); /* gradient dP4/dx=0 */\n    x = Math.floor(t + 0.5);\n    y = Math.floor(r + 0.5);\n    r = (y1 - y0) * (t - x0) / (x1 - x0) + y0; /* intersect P3 | P0 P1 */\n    quadBezierSegment(x0, y0, x, Math.floor(r + 0.5), x, y, setPixel);\n    r = (y1 - y2) * (t - x2) / (x1 - x2) + y2; /* intersect P4 | P1 P2 */\n    x0 = x1 = x;\n    y0 = y;\n    y1 = Math.floor(r + 0.5); /* P0 = P4, P1 = P8 */\n  }\n  if ((y0 - y1) * (y2 - y1) > 0) { /* vertical cut at P6? */\n    t = y0 - 2 * y1 + y2;\n    t = (y0 - y1) / t;\n    r = (1 - t) * ((1 - t) * x0 + 2 * t * x1) + t * t * x2; /* Bx(t=P6) */\n    t = (y0 * y2 - y1 * y1) * t / (y0 - y1); /* gradient dP6/dy=0 */\n    x = Math.floor(r + 0.5);\n    y = Math.floor(t + 0.5);\n    r = (x1 - x0) * (t - y0) / (y1 - y0) + x0; /* intersect P6 | P0 P1 */\n    quadBezierSegment(x0, y0, Math.floor(r + 0.5), y, x, y, setPixel);\n    r = (x1 - x2) * (t - y2) / (y1 - y2) + x2; /* intersect P7 | P1 P2 */\n    x0 = x;\n    x1 = Math.floor(r + 0.5);\n    y0 = y1 = y; /* P0 = P6, P1 = P7 */\n  }\n  quadBezierSegment(x0, y0, x1, y1, x2, y2, setPixel); /* remaining part */\n}\n\n/**\n * plot a limited quadratic Bezier segment\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {setPixel} setPixel\n */\nexport function quadBezierSegment(x0, y0, x1, y1, x2, y2, setPixel) {\n  var sx = x2 - x1,\n      sy = y2 - y1;\n  var xx = x0 - x1,\n      yy = y0 - y1,\n      xy; /* relative values for checks */\n  var dx, dy, err, cur = xx * sy - yy * sx; /* curvature */\n\n  assert(xx * sx <= 0 && yy * sy <= 0, 'sign of gradient must not change');\n\n  if (sx * sx + sy * sy > xx * xx + yy * yy) { /* begin with longer part */\n    x2 = x0;\n    x0 = sx + x1;\n    y2 = y0;\n    y0 = sy + y1;\n    cur = -cur; /* swap P0 P2 */\n  }\n  if (cur != 0) { /* no straight line */\n    xx += sx;\n    xx *= sx = x0 < x2 ? 1 : -1; /* x step direction */\n    yy += sy;\n    yy *= sy = y0 < y2 ? 1 : -1; /* y step direction */\n    xy = 2 * xx * yy;\n    xx *= xx;\n    yy *= yy; /* differences 2nd degree */\n    if (cur * sx * sy < 0) { /* negated curvature? */\n      xx = -xx;\n      yy = -yy;\n      xy = -xy;\n      cur = -cur;\n    }\n    dx = 4 * sy * cur * (x1 - x0) + xx - xy; /* differences 1st degree */\n    dy = 4 * sx * cur * (y0 - y1) + yy - xy;\n    xx += xx;\n    yy += yy;\n    err = dx + dy + xy; /* error 1st step */\n    do {\n      setPixel(x0, y0); /* plot curve */\n      if (x0 == x2 && y0 == y2) return; /* last pixel -> curve finished */\n      y1 = 2 * err < dx; /* save value for test of y step */\n      if (2 * err > dy) {\n        x0 += sx;\n        dx -= xy;\n        err += dy += yy;\n      } /* x step */\n      if (y1) {\n        y0 += sy;\n        dy -= xy;\n        err += dx += xx;\n      } /* y step */\n    } while (dy < 0 && dx > 0); /* gradient negates -> algorithm fails */\n  }\n  line(x0, y0, x2, y2, setPixel); /* plot remaining part to end */\n}\n\n\n/**\n * Plot any quadratic Bezier curve with anti-alias\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {setPixelAlpha} setPixelAA\n */\nexport function quadBezierAA(x0, y0, x1, y1, x2, y2, setPixelAA) {\n  var x = x0 - x1,\n      y = y0 - y1;\n  var t = x0 - 2 * x1 + x2, r;\n\n  if (x * (x2 - x1) > 0) { /* horizontal cut at P4? */\n    if (y * (y2 - y1) > 0) /* vertical cut at P6 too? */\n      if (Math.abs((y0 - 2 * y1 + y2) / t * x) > Math.abs(y)) { /* which first? */\n        x0 = x2;\n        x2 = x + x1;\n        y0 = y2;\n        y2 = y + y1; /* swap points */\n      } /* now horizontal cut at P4 comes first */\n    t = (x0 - x1) / t;\n    r = (1 - t) * ((1 - t) * y0 + 2 * t * y1) + t * t * y2; /* By(t=P4) */\n    t = (x0 * x2 - x1 * x1) * t / (x0 - x1); /* gradient dP4/dx=0 */\n    x = Math.floor(t + 0.5);\n    y = Math.floor(r + 0.5);\n    r = (y1 - y0) * (t - x0) / (x1 - x0) + y0; /* intersect P3 | P0 P1 */\n    quadBezierSegmentAA(x0, y0, x, Math.floor(r + 0.5), x, y, setPixelAA);\n    r = (y1 - y2) * (t - x2) / (x1 - x2) + y2; /* intersect P4 | P1 P2 */\n    x0 = x1 = x;\n    y0 = y;\n    y1 = Math.floor(r + 0.5); /* P0 = P4, P1 = P8 */\n  }\n  if ((y0 - y1) * (y2 - y1) > 0) { /* vertical cut at P6? */\n    t = y0 - 2 * y1 + y2;\n    t = (y0 - y1) / t;\n    r = (1 - t) * ((1 - t) * x0 + 2 * t * x1) + t * t * x2; /* Bx(t=P6) */\n    t = (y0 * y2 - y1 * y1) * t / (y0 - y1); /* gradient dP6/dy=0 */\n    x = Math.floor(r + 0.5);\n    y = Math.floor(t + 0.5);\n    r = (x1 - x0) * (t - y0) / (y1 - y0) + x0; /* intersect P6 | P0 P1 */\n    quadBezierSegmentAA(x0, y0, Math.floor(r + 0.5), y, x, y, setPixelAA);\n    r = (x1 - x2) * (t - y2) / (y1 - y2) + x2; /* intersect P7 | P1 P2 */\n    x0 = x;\n    x1 = Math.floor(r + 0.5);\n    y0 = y1 = y; /* P0 = P6, P1 = P7 */\n  }\n  quadBezierSegmentAA(x0, y0, x1, y1, x2, y2, setPixelAA); /* remaining part */\n}\n\n\n/**\n * Draw an limited anti-aliased quadratic Bezier segment\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {setPixelAlpha} setPixelAA\n */\nexport function quadBezierSegmentAA(x0, y0, x1, y1, x2, y2, setPixelAA) {\n  var sx = x2 - x1,\n      sy = y2 - y1;\n  var xx = x0 - x1,\n      yy = y0 - y1,\n      xy; /* relative values for checks */\n  var dx, dy, err, ed, cur = xx * sy - yy * sx; /* curvature */\n\n  // assert(xx*sx <= 0 && yy*sy <= 0, 'sign of gradient must not change');\n\n  if (sx * sx + sy * sy > xx * xx + yy * yy) { /* begin with longer part */\n    x2 = x0;\n    x0 = sx + x1;\n    y2 = y0;\n    y0 = sy + y1;\n    cur = -cur; /* swap P0 P2 */\n  }\n  if (cur != 0) { /* no straight line */\n    xx += sx;\n    xx *= sx = x0 < x2 ? 1 : -1; /* x step direction */\n    yy += sy;\n    yy *= sy = y0 < y2 ? 1 : -1; /* y step direction */\n    xy = 2 * xx * yy;\n    xx *= xx;\n    yy *= yy; /* differences 2nd degree */\n    if (cur * sx * sy < 0) { /* negated curvature? */\n      xx = -xx;\n      yy = -yy;\n      xy = -xy;\n      cur = -cur;\n    }\n    dx = 4 * sy * (x1 - x0) * cur + xx - xy; /* differences 1st degree */\n    dy = 4 * sx * (y0 - y1) * cur + yy - xy;\n    xx += xx;\n    yy += yy;\n    err = dx + dy + xy; /* error 1st step */\n    do {\n      cur = Math.min(dx + xy, -xy - dy);\n      ed = Math.max(dx + xy, -xy - dy); /* approximate error distance */\n      ed += 2 * ed * cur * cur / (4 * ed * ed + cur * cur);\n      setPixelAA(x0, y0, 255 * Math.abs(err - dx - dy - xy) / ed); /* plot curve */\n      if (x0 == x2 || y0 == y2) break; /* last pixel -> curve finished */\n      x1 = x0;\n      cur = dx - err;\n      y1 = 2 * err + dy < 0;\n      if (2 * err + dx > 0) { /* x step */\n        if (err - dy < ed) setPixelAA(x0, y0 + sy, 255 * Math.abs(err - dy) / ed);\n        x0 += sx;\n        dx -= xy;\n        err += dy += yy;\n      }\n      if (y1) { /* y step */\n        if (cur < ed) setPixelAA(x1 + sx, y0, 255 * Math.abs(cur) / ed);\n        y0 += sy;\n        dy -= xy;\n        err += dx += xx;\n      }\n    } while (dy < dx); /* gradient negates -> close curves */\n  }\n  lineAA(x0, y0, x2, y2, setPixelAA); /* plot remaining needle to end */\n}\n","import assert from '../assert';\nimport {\n  quadBezierSegmentAA,\n  quadBezierSegment\n} from './quadratic';\nimport { line, lineAA } from '../line';\n\n/**\n * Plot limited cubic Bezier segment\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {number} x3\n * @param  {number} y3\n * @param  {setPixel} setPixel\n */\nexport function cubicBezierSegment(x0, y0, x1, y1, x2, y2, x3, y3, setPixel) {\n  var f, fx, fy, leg = 1;\n  var sx = x0 < x3 ? 1 : -1,\n      sy = y0 < y3 ? 1 : -1; /* step direction */\n  var xc = -Math.abs(x0 + x1 - x2 - x3),\n      xa = xc - 4 * sx * (x1 - x2),\n      xb = sx * (x0 - x1 - x2 + x3);\n  var yc = -Math.abs(y0 + y1 - y2 - y3),\n      ya = yc - 4 * sy * (y1 - y2),\n      yb = sy * (y0 - y1 - y2 + y3);\n  var ab, ac, bc, cb, xx, xy, yy, dx, dy, ex, pxy, EP = 0.01;\n  /* check for curve restrains */\n  /* slope P0-P1 == P2-P3    and  (P0-P3 == P1-P2      or   no slope change) */\n  assert((x1 - x0) * (x2 - x3) < EP && ((x3 - x0) * (x1 - x2) < EP || xb * xb <\n    xa * xc + EP), 'slope change');\n  assert((y1 - y0) * (y2 - y3) < EP && ((y3 - y0) * (y1 - y2) < EP || yb * yb <\n    ya * yc + EP), 'slope change');\n\n  if (xa == 0 && ya == 0) { /* quadratic Bezier */\n    sx = Math.floor((3 * x1 - x0 + 1) / 2);\n    sy = Math.floor((3 * y1 - y0 + 1) / 2); /* new midpoint */\n    return quadBezierSegment(x0, y0, sx, sy, x3, y3, setPixel);\n  }\n  x1 = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0) + 1; /* line lengths */\n  x2 = (x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3) + 1;\n  do { /* loop over both ends */\n    ab = xa * yb - xb * ya;\n    ac = xa * yc - xc * ya;\n    bc = xb * yc - xc * yb;\n    ex = ab * (ab + ac - 3 * bc) + ac * ac; /* P0 part of self-intersection loop? */\n    f = ex > 0 ? 1 : Math.sqrt(1 + 1024 / x1); /* calculate resolution */\n    ab *= f;\n    ac *= f;\n    bc *= f;\n    ex *= f * f; /* increase resolution */\n    xy = 9 * (ab + ac + bc) / 8;\n    cb = 8 * (xa - ya); /* init differences of 1st degree */\n    dx = 27 * (8 * ab * (yb * yb - ya * yc) + ex * (ya + 2 * yb + yc)) / 64 -\n      ya * ya * (xy - ya);\n    dy = 27 * (8 * ab * (xb * xb - xa * xc) - ex * (xa + 2 * xb + xc)) / 64 -\n      xa * xa * (xy + xa);\n    /* init differences of 2nd degree */\n    xx = 3 * (3 * ab * (3 * yb * yb - ya * ya - 2 * ya * yc) - ya * (3 * ac * (\n      ya + yb) + ya * cb)) / 4;\n    yy = 3 * (3 * ab * (3 * xb * xb - xa * xa - 2 * xa * xc) - xa * (3 * ac * (\n      xa + xb) + xa * cb)) / 4;\n    xy = xa * ya * (6 * ab + 6 * ac - 3 * bc + cb);\n    ac = ya * ya;\n    cb = xa * xa;\n    xy = 3 * (xy + 9 * f * (cb * yb * yc - xb * xc * ac) - 18 * xb * yb * ab) /\n      8;\n\n    if (ex < 0) { /* negate values if inside self-intersection loop */\n      dx = -dx;\n      dy = -dy;\n      xx = -xx;\n      yy = -yy;\n      xy = -xy;\n      ac = -ac;\n      cb = -cb;\n    } /* init differences of 3rd degree */\n    ab = 6 * ya * ac;\n    ac = -6 * xa * ac;\n    bc = 6 * ya * cb;\n    cb = -6 * xa * cb;\n    dx += xy;\n    ex = dx + dy;\n    dy += xy; /* error of 1st step */\n\n    outer:for (pxy = xy, fx = fy = f; x0 != x3 && y0 != y3;) {\n      setPixel(x0, y0); /* plot curve */\n      do { /* move sub-steps of one pixel */\n        if (dx > pxy || dy < pxy) {\n          break outer;\n        } /* confuMath.sing values */\n        y1 = 2 * ex - dy; /* save value for test of y step */\n        if (2 * ex >= dx) { /* x sub-step */\n          fx--;\n          ex += dx += xx;\n          dy += xy += ac;\n          yy += bc;\n          xx += ab;\n        }\n        if (y1 <= 0) { /* y sub-step */\n          fy--;\n          ex += dy += yy;\n          dx += xy += bc;\n          xx += ac;\n          yy += cb;\n        }\n      } while (fx > 0 && fy > 0); /* pixel complete? */\n      if (2 * fx <= f) {\n        x0 += sx;\n        fx += f;\n      } /* x step */\n      if (2 * fy <= f) {\n        y0 += sy;\n        fy += f;\n      } /* y step */\n      if (pxy == xy && dx < 0 && dy > 0) pxy = EP; /* pixel ahead valid */\n    }\n    //exit:\n    xx = x0;\n    x0 = x3;\n    x3 = xx;\n    sx = -sx;\n    xb = -xb; /* swap legs */\n\n    yy = y0;\n    y0 = y3;\n    y3 = yy;\n    sy = -sy;\n    yb = -yb;\n    x1 = x2;\n  } while (leg--); /* try other end */\n  line(x0, y0, x3, y3, setPixel); /* remaining part in case of cusp or crunode */\n}\n\n/**\n * Plot limited anti-aliased cubic Bezier segment\n * @param  {Number} x0\n * @param  {Number} y0\n * @param  {Number} x1\n * @param  {Number} y1\n * @param  {Number} x2\n * @param  {Number} y2\n * @param  {Number} x3\n * @param  {Number} y3\n * @param  {setPixelAA} setPixelAA\n */\nexport function cubicBezierSegmentAA(x0, y0, x1, y1, x2, y2, x3, y3, setPixelAA) {\n   let f, fx, fy, leg = 1;\n   let sx = x0 < x3 ? 1 : -1, sy = y0 < y3 ? 1 : -1;        /* step direction */\n   let xc = -Math.abs(x0 + x1 - x2 - x3),\n       xa = xc - 4 * sx * (x1 - x2),\n       xb = sx * (x0 - x1 - x2 + x3);\n   let yc = -Math.abs(y0 + y1 - y2 - y3),\n       ya = yc - 4 * sy * (y1 - y2),\n       yb = sy * (y0 - y1 - y2 + y3);\n   let ab, ac, bc, ba, xx, xy, yy, dx, dy, ex, px, py, ed, ip;\n   const EP = 0.01;\n\n                                                 /* check for curve restrains */\n   /* slope P0-P1 == P2-P3     and  (P0-P3 == P1-P2      or  no slope change) */\n   assert((x1 - x0) * (x2 - x3) < EP &&\n    ((x3 - x0) * (x1 - x2) < EP || xb * xb < xa * xc + EP));\n   assert((y1 - y0) * (y2 - y3) < EP &&\n    ((y3 - y0) * (y1 - y2) < EP || yb * yb < ya * yc + EP));\n\n   if (xa === 0 && ya === 0) {                            /* quadratic Bezier */\n      sx = Math.floor((3 * x1 - x0 + 1) / 2);\n      sy = Math.floor((3 * y1 - y0 + 1) / 2);                 /* new midpoint */\n      return quadBezierSegmentAA(x0,y0, sx,sy, x3,y3, setPixelAA);\n   }\n   x1 = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0) + 1;    /* line lengths */\n   x2 = (x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3) + 1;\n   do {                                                /* loop over both ends */\n      ab = xa * yb-xb * ya; ac = xa * yc-xc * ya; bc = xb * yc-xc * yb;\n      ip = 4 * ab * bc - ac * ac;           /* self intersection loop at all? */\n                                        /* P0 part of self-intersection loop? */\n      ex = ab * (ab + ac - 3 * bc) + ac * ac;\n      f = ex > 0 ? 1 : Math.sqrt(1 + 1024 / x1);      /* calculate resolution */\n      ab *= f; ac *= f; bc  *= f; ex  *= f * f;        /* increase resolution */\n      xy = 9 * (ab + ac + bc) / 8;\n      ba = 8 * (xa - ya);                   /* init differences of 1st degree */\n      dx = 27 * (8 * ab * (yb * yb-ya * yc) + ex * (ya + 2 * yb + yc)) / 64 - ya * ya * (xy - ya);\n      dy = 27 * (8 * ab * (xb * xb-xa * xc) - ex * (xa + 2 * xb + xc)) / 64 - xa * xa * (xy + xa);\n                                            /* init differences of 2nd degree */\n      xx = 3 * (3 * ab * (3 * yb * yb - ya * ya - 2 * ya * yc) - ya * (3 * ac * (ya + yb) + ya * ba)) / 4;\n      yy = 3 * (3 * ab * (3 * xb * xb - xa * xa - 2 * xa * xc) - xa * (3 * ac * (xa + xb) + xa * ba)) / 4;\n      xy = xa * ya * (6 * ab + 6 * ac - 3 * bc + ba);\n      ac = ya * ya;\n      ba = xa * xa;\n      xy = 3 * (xy + 9 * f * (ba * yb * yc-xb * xc * ac) - 18 * xb * yb * ab) / 8;\n\n      if (ex < 0) {         /* negate values if inside self-intersection loop */\n         dx = -dx; dy = -dy; xx = -xx; yy = -yy; xy = -xy; ac = -ac; ba = -ba;\n      }                                     /* init differences of 3rd degree */\n      ab = 6 * ya * ac; ac = -6 * xa * ac; bc = 6 * ya * ba; ba = -6 * xa * ba;\n      dx += xy; ex = dx+dy; dy += xy;                    /* error of 1st step */\n\n      let exit = false;\n      outer: for (fx = fy = f; x0 !== x3 && y0 !== y3; ) {\n         y1 = Math.min(Math.abs(xy-dx), Math.abs(dy-xy));\n         /* approximate error distance */\n         ed = Math.max(Math.abs(xy-dx), Math.abs(dy-xy));\n         ed = f * (ed+2 * ed * y1 * y1 / (4 * ed * ed + y1 * y1));\n         y1 = 255 * Math.abs(ex - (f - fx + 1) * dx - (f - fy + 1) * dy + f * xy) / ed;\n         if (y1 < 256) setPixelAA(x0, y0, y1);                  /* plot curve */\n         /* pixel intensity x move */\n         px = Math.abs(ex - (f - fx + 1) * dx + (fy - 1) * dy);\n         /* pixel intensity y move */\n         py = Math.abs(ex + (fx - 1) * dx - (f - fy + 1) * dy);\n         y2 = y0;\n         do {                                  /* move sub-steps of one pixel */\n            if (ip >= -EP)               /* intersection possible? -> check.. */\n              if (dx+xx > xy || dy+yy < xy) {             /* two x or y steps */\n                exit = true; break outer;\n              }\n            y1 = 2 * ex+dx;                  /* save value for test of y step */\n            if (2 * ex+dy > 0) {                                /* x sub-step */\n               fx--; ex += dx += xx; dy += xy += ac; yy += bc; xx += ab;\n            } else if (y1 > 0) {                          /* tiny nearly cusp */\n              exit = true; break outer;\n            }\n            if (y1 <= 0) {                                      /* y sub-step */\n               fy--; ex += dy += yy; dx += xy += bc; xx += ac; yy += ba;\n            }\n         } while (fx > 0 && fy > 0);                       /* pixel complete? */\n         if (2 * fy <= f) {                         /* x+ anti-aliasing pixel */\n            if (py < ed) setPixelAA(x0 + sx, y0, 255 * py / ed);/* plot curve */\n            y0 += sy; fy += f;                                      /* y step */\n         }\n         if (2 * fx <= f) {                         /* y+ anti-aliasing pixel */\n            if (px < ed) setPixelAA(x0, y2 + sy, 255 * px / ed);/* plot curve */\n            x0 += sx; fx += f;                                      /* x step */\n         }\n      }\n\n      if (exit) {\n        if (2 * ex < dy && 2 * fy <= f+2) {   /* round x+ approximation pixel */\n           if (py < ed) setPixelAA(x0 + sx, y0, 255 * py / ed); /* plot curve */\n           y0 += sy;\n        }\n        if (2 * ex > dx && 2 * fx <= f+2) {   /* round y+ approximation pixel */\n           if (px < ed) setPixelAA(x0, y2 + sy, 255 * px / ed); /* plot curve */\n           x0 += sx;\n        }\n        xx = x0; x0 = x3; x3 = xx; sx = -sx; xb = -xb;           /* swap legs */\n        yy = y0; y0 = y3; y3 = yy; sy = -sy; yb = -yb; x1 = x2;\n      }\n      break;                                          /* finish curve by line */\n   } while (leg--);                                          /* try other end */\n   /* remaining part in case of cusp or crunode */\n   lineAA(x0,y0, x3,y3, setPixelAA);\n}\n\n/**\n * plot any cubic Bezier curve\n * @param  {number} x0\n * @param  {number} y0\n * @param  {number} x1\n * @param  {number} y1\n * @param  {number} x2\n * @param  {number} y2\n * @param  {number} x3\n * @param  {number} y3\n * @param  {setPixel} setPixel\n */\nexport function cubicBezier(x0, y0, x1, y1, x2, y2, x3, y3, setPixel) {\n  var n = 0, i = 0;\n  var xc = x0 + x1 - x2 - x3,\n      xa = xc - 4 * (x1 - x2);\n  var xb = x0 - x1 - x2 + x3,\n      xd = xb + 4 * (x1 + x2);\n  var yc = y0 + y1 - y2 - y3,\n      ya = yc - 4 * (y1 - y2);\n  var yb = y0 - y1 - y2 + y3,\n      yd = yb + 4 * (y1 + y2);\n  var fx0 = x0,\n      fx1, fx2, fx3, fy0 = y0,\n      fy1, fy2, fy3;\n  var t1 = xb * xb - xa * xc,\n      t2, t = [0, 0, 0, 0, 0];\n  /* sub-divide curve at gradient sign changes */\n  if (xa == 0) { /* horizontal */\n    if (Math.abs(xc) < 2 * Math.abs(xb)) t[n++] = xc / (2 * xb); /* one change */\n  } else if (t1 > 0.0) { /* two changes */\n    t2 = Math.sqrt(t1);\n    t1 = (xb - t2) / xa;\n    if (Math.abs(t1) < 1) t[n++] = t1;\n    t1 = (xb + t2) / xa;\n    if (Math.abs(t1) < 1) t[n++] = t1;\n  }\n  t1 = yb * yb - ya * yc;\n  if (ya == 0) { /* vertical */\n    if (Math.abs(yc) < 2 * Math.abs(yb)) t[n++] = yc / (2 * yb); /* one change */\n  } else if (t1 > 0.0) { /* two changes */\n    t2 = Math.sqrt(t1);\n    t1 = (yb - t2) / ya;\n    if (Math.abs(t1) < 1) t[n++] = t1;\n    t1 = (yb + t2) / ya;\n    if (Math.abs(t1) < 1) t[n++] = t1;\n  }\n  for (i = 1; i < n; i++) /* bubble sort of 4 points */\n    if ((t1 = t[i - 1]) > t[i]) {\n      t[i - 1] = t[i];\n      t[i] = t1;\n      i = 0;\n    }\n\n  t1 = -1;\n  t[n] = 1; /* begin / end point */\n  for (i = 0; i <= n; i++) { /* plot each segment separately */\n    t2 = t[i]; /* sub-divide at t[i-1], t[i] */\n    fx1 = (t1 * (t1 * xb - 2 * xc) - t2 * (t1 * (t1 * xa - 2 * xb) + xc) + xd) / 8 - fx0;\n    fy1 = (t1 * (t1 * yb - 2 * yc) - t2 * (t1 * (t1 * ya - 2 * yb) + yc) + yd) / 8 - fy0;\n    fx2 = (t2 * (t2 * xb - 2 * xc) - t1 * (t2 * (t2 * xa - 2 * xb) + xc) + xd) / 8 - fx0;\n    fy2 = (t2 * (t2 * yb - 2 * yc) - t1 * (t2 * (t2 * ya - 2 * yb) + yc) + yd) / 8 - fy0;\n    fx0 -= fx3 = (t2 * (t2 * (3 * xb - t2 * xa) - 3 * xc) + xd) / 8;\n    fy0 -= fy3 = (t2 * (t2 * (3 * yb - t2 * ya) - 3 * yc) + yd) / 8;\n    x3 = Math.floor(fx3 + 0.5);\n    y3 = Math.floor(fy3 + 0.5); /* scale bounds to int */\n    if (fx0 != 0.0) {\n      fx1 *= fx0 = (x0 - x3) / fx0;\n      fx2 *= fx0;\n    }\n    if (fy0 != 0.0) {\n      fy1 *= fy0 = (y0 - y3) / fy0;\n      fy2 *= fy0;\n    }\n    if (x0 != x3 || y0 != y3) /* segment t1 - t2 */\n      cubicBezierSegment(x0, y0, x0 + fx1, y0 + fy1, x0 + fx2, y0 + fy2, x3, y3, setPixel);\n    x0 = x3;\n    y0 = y3;\n    fx0 = fx3;\n    fy0 = fy3;\n    t1 = t2;\n  }\n}\n","/**\n * Bresenham rasterisation functions by Alois Zingl\n * @author Alois Zingl\n * @preserve\n */\n\n/**\n * Use that callback to fill the pixel on canvas.\n * @callback setPixel\n * @param {number} x\n * @param {number} y\n */\n\n/**\n * Callback that would also receive the alpha value for the pixel\n * @callback setPixelAlpha\n * @param {number} x\n * @param {number} y\n * @param {number} alpha\n */\n\nexport * from './src/line';\n\nexport * from './src/ellipse';\n\nexport * from './src/circle';\n\nexport * from './src/bezier';\n"],"names":["let","const"],"mappings":"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"}